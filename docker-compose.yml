version: '3.8'

services:
  # Servicio de Redis: actúa como broker y backend para Celery
  redis:
    image: redis:6-alpine
    ports:
      - "6379:6379"

  # Servicio de la Base de Datos PostgreSQL
  db:
    image:  postgres:16-alpine 
    volumes:
      - postgres_data:/var/lib/postgresql/data/
    environment:
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
    ports:
      - "5432:5432" # Opcional: para conectar desde tu máquina local si lo necesitas

  # Servicio del Backend Django 
  backend:
    build: .
    ports:
      - "8000:8000"
    volumes:
      - .:/app
    command: python manage.py runserver 0.0.0.0:8000
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING}
      - LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT}
    depends_on:
      - redis
      - db  

  # Servicio del Worker de Celery 
  worker:
    build: .
    volumes:
      - .:/app
    command: celery -A config.celery worker --loglevel=info
    environment:
      - GEMINI_API_KEY=${GEMINI_API_KEY}
      - POSTGRES_DB=${POSTGRES_DB}
      - POSTGRES_USER=${POSTGRES_USER}
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_HOST=${POSTGRES_HOST}
      - POSTGRES_PORT=${POSTGRES_PORT}
      - LANGSMITH_TRACING=${LANGSMITH_TRACING}
      - LANGSMITH_ENDPOINT=${LANGSMITH_ENDPOINT}
      - LANGSMITH_API_KEY=${LANGSMITH_API_KEY}
      - LANGSMITH_PROJECT=${LANGSMITH_PROJECT}
    depends_on:
      - redis
      - db 

volumes:
  postgres_data: